knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
install.packages("quantmod")
library(quantmod)
# Set risk free interest rate
r.riskfree = 0.0075
# I download option price data from Bloomberg terminmal on March-01-2017
GS.1m.call=read.csv('/Users/tony/Desktop/515R/GS 030117 1m call.csv')
payoff=function(S,K,expect,type1=c('American','Europrean'),type2=c('Call','Put')){
temp1=ifelse(type1=='European',0,expect)
temp2=ifelse(type2=='Call',1,-1)
result=max(temp2*(S-K),temp1)
return(result)
}
# Here we define a payoff funcion,
# For American option, we need to decide whether to exercise or not
explicit.method = function(S,K,tao,sigma,r,step,dx, first,
div,type1=c('American','European'),type2=c('Call','Put')){
v=r-div-0.5*sigma^2
dt=tao/step
pu=0.5*dt*(sigma^2/dx^2+v/dx)
pm=1-dt*sigma^2/dx^2-r*dt
pd=0.5*dt*(sigma^2/dx^2-v/dx)
# First we calculate parameters we need
firstRow = firstCol = 1
nRows = lastRow = 2*step+1
middleRow = step+1
nCols = lastCol = step+1
# Some variables we need to help us understand the position in tree.
V.data = S.data = matrix(0, nrow=nRows, ncol=nCols, dimnames=list(
paste("NumUps", step:-step, sep="="), paste("T", 0:step, sep="=")))
S.data[step+1, 1] = S
# Set the data table and initial stock value
for (j in 1:(nCols-1)) {
for(i in (nCols-(j-1)):(nCols+(j-1))) {
S.data [i-1, j+1] = S.data [i, j]*exp(dx)
# up case
S.data [i ,  j+1] = S.data [i, j]
# middle case
S.data [i+1, j+1] = S.data [i, j]*exp(-dx)
# down case
}
}
# Calculating all stock prices.
for (i in 1:nRows) {
V.data[i, lastCol] = payoff(S=S.data[i,lastCol],K=K,type1 = 'European',type2 = type2)
}
# Calculating the option price at maturity.
for (j in (nCols-1):1) {
for(i in (middleRow+(step-1)):(middleRow-(step-1))) {
V.data[i, j] = (pu*V.data[i-1,j+1] + pm*V.data[i, j+1] + pd*V.data[i+1,j+1])
}
# Boundary Condition
stockTerm = ifelse(type2=='Call', (S.data[1,lastCol]-S.data[2,lastCol]),
(S.data[nRows-1,lastCol]-S.data[nRows,lastCol]))
V.data[firstRow, j] = V.data[firstRow+1,j] + ifelse(type2=='Call', stockTerm, 0)
V.data[lastRow , j] = V.data[lastRow-1, j] + ifelse(type2=='Call', 0, stockTerm)
# That is for Call, when stock price is high, dV/dS = 1
# when stock price is low, dV/dS = 0
# For put, the when stock price is high, dV/dS = 0
# when stock price is low, dV/dS = -1
# Then we will add up American option case, deciding whether to exercise
if(type1=='American') {
for(i in lastRow:firstRow){
V.data[i, j] = payoff(S=S.data[i,lastCol],K=K,type1 = 'American',type2 = type2,
expect=V.data[i, j])
}
}
}
## Step backwards through the trinomial tree
list(Type = paste(type1,type2), probability=c(pu,pm,pd),
Price = V.data[step+1,1],
S.first.steps=S.data[(step+1-first):(step+1+first),1:(1+first)],
V.first.steps=V.data[(step+1-first):(step+1+first),1:(1+first)]
## output result including Type, Option price, probability
## and first steps of Stock and Opton.
)
}
implicit.method = function(S,K,tao,sigma,r,step,dx, first,
div,type1=c('American','European'),type2=c('Call','Put')){
v=r-div-0.5*sigma^2
dt=tao/step
pu=- 0.5*dt*(sigma^2/dx^2+v/dx)
pm=1+dt*sigma^2/dx^2+r*dt
pd=- 0.5*dt*(sigma^2/dx^2-v/dx)
# First we calculate parameters we need
firstRow = firstCol = 1
nRows = lastRow = 2*step+1
middleRow = step+1
nCols = lastCol = step+1
# Some variables we need to help us understand the position in tree.
V.data = S.data = matrix(NA, nrow=nRows, ncol=nCols, dimnames=list(
paste("NumUps", step:-step, sep="="), paste("T", 0:step, sep="=")))
S.data[step+1, 1] = S
# Set the data table and initial stock value
for (j in 1:(nCols-1)) {
for(i in (nCols-(j-1)):(nCols+(j-1))) {
S.data [i-1, j+1] = S.data [i, j]*exp(dx)
# up case
S.data [i ,  j+1] = S.data [i, j]
# middle case
S.data [i+1, j+1] = S.data [i, j]*exp(-dx)
# down case
}
}
# Calculating all stock prices.
for (i in 1:nRows) {
V.data[i, lastCol] = payoff(S=S.data[i,lastCol],K=K,type1 = 'European',type2 = type2)
}
# Calculating the option price at maturity.
# Derivative Boundary Conditions
lambda.up = ifelse(type2=='Call',1 * (S.data[lastRow-1, lastCol] - S.data[lastRow,lastCol]),0)
lambda.low = ifelse(type2=='Call',0,-1 * (S.data[lastRow-1, lastCol] - S.data[lastRow,lastCol]))
# Then we will use Clewlow's method to solve the tridiagnoal matrix equation efficiently
# this is better than just solve(A,b) directly because of the tridiagnoal property
solve.implicit.tridiagnoal=function(V.data,pu,pm,pd,lambda.up,lambda.low,colI){
lastRow = nrow(V.data)
lastCol = ncol(V.data)
p.prime = c()
pm.prime = c()
# we define p.prime and pm.prime for intermediate steps in the iterations
pm.prime[lastRow-1] = pm + pd
p.prime[lastRow-1]  = V.data[lastRow-1, lastCol] + pd*lambda.low
# wo start from the last row (where the boundary took place)
# the middle part is kind of iterations
for (j in (lastRow-2):2) {
pm.prime[j] = pm - pu*pd/pm.prime[j+1]
p.prime[j] = V.data[j, colI+1] - p.prime[j+1]*pd/pm.prime[j+1]
}
# solve all of the p.prime and pm.price
V.data[1, colI] = (p.prime[2] + pm.prime[2]*lambda.up)/(pu + pm.prime[2])
V.data[2, colI] = V.data[1,colI] - lambda.up
# we get the first two option values
# And then go back  the rest of them
for(j in 3:lastRow) {
V.data[j, colI] =  (p.prime[j] -pu*V.data[j-1, colI])/pm.prime[j]
}
V.data[lastRow, colI] = V.data[lastRow-1, colI] - lambda.low
# Out put the V.data(option table),and p.prime and pm.prime(for latter iterations)
list(V.data=V.data)
}
for(j in (nCols-1):1){
V.data[, j] = solve.implicit.tridiagnoal(V.data,pu,pm,pd,
lambda.up,lambda.low,colI=j)$V.data[,j]
if(type1=='American'){
for(i in 1:nRows){
V.data[i, j] = payoff(S=S.data[i,lastCol],K=K,type1 = 'American',
type2 = type2, expect=V.data[i, j])
}
# consider American option can be exercised early
}
}
list(Type = paste(type1,type2), probability=c(pu,pm,pd),
Price = V.data[step+1,1],
S.first.steps=S.data[(step+1-first):(step+1+first),1:(1+first)],
V.first.steps=V.data[(step+1-first):(step+1+first),1:(1+first)]
## output result including Type, Option price, probability
## and first steps of Stock and Opton.
)
}
crank.nicolson.method = function(S,K,tao,sigma,r,step,dx, first,
div,type1=c('American','European'),type2=c('Call','Put')){
v=r-div-0.5*sigma^2
dt=tao/step
pu=-0.25*dt*(sigma^2/dx^2+v/dx)
pm=1+0.5*dt*sigma^2/dx^2+r*dt/2
pd=-0.25*dt*(sigma^2/dx^2-v/dx)
# First we calculate parameters we need
# not the pm,pu,pd is different from implicit method
firstRow = firstCol = 1
nRows = lastRow = 2*step+1
middleRow = step+1
nCols = lastCol = step+1
# Some variables we need to help us understand the position in tree.
V.data = S.data = matrix(0, nrow=nRows, ncol=nCols, dimnames=list(
paste("NumUps", step:-step, sep="="), paste("T", 0:step, sep="=")))
S.data[step+1, 1] = S
# Set the data table and initial stock value
for (j in 1:(nCols-1)) {
for(i in (nCols-(j-1)):(nCols+(j-1))) {
S.data [i-1, j+1] = S.data [i, j]*exp(dx)
# up case
S.data [i ,  j+1] = S.data [i, j]
# middle case
S.data [i+1, j+1] = S.data [i, j]*exp(-dx)
# down case
}
}
# Calculating all stock prices.
for (i in 1:nRows) {
V.data[i, lastCol] = payoff(S=S.data[i,lastCol],K=K,type1 = 'European',type2 = type2)
}
# Calculating the option price at maturity.
lambda.up = ifelse(type2=='Call',1 * (S.data[1, lastCol] - S.data[2,lastCol]),0)
lambda.low = ifelse(type2=='Call',0,-1 * (S.data[lastRow-1, lastCol] - S.data[lastRow,lastCol]))
# Boundary condition, same as in implicit method
solve.crank.nicolson.tridiagnoal=function(V.data,pu,pm,pd,lambda.up,lambda.low,colI){
lastRow = nrow(V.data)
lastCol = ncol(V.data)
p.prime = c()
pm.prime = c()
# we define p.prime and pm.prime for intermediate steps in the iterations
pm.prime[lastRow-1] = pm + pd
p.prime[lastRow-1]  = (-pu*V.data[lastRow-2,lastCol]
-(pm-2)*V.data[lastRow-1,lastCol]
-pd*V.data[lastRow,lastCol]+pd*lambda.low)
# wo start from the last row (where the boundary took place)
for (j in (lastRow-2):2) {
pm.prime[j] = pm - pu*pd/pm.prime[j+1]
p.prime[j] = (-pu*V.data[j-1,colI+1]
-(pm-2)*V.data[j,colI+1]
-pd*V.data[j+1,colI+1]
- p.prime[j+1]*pd/pm.prime[j+1])
}
# solve all of the p.prime and pm.price
V.data[1, colI] = (p.prime[2] + pm.prime[2]*lambda.up)/(pu + pm.prime[2])
V.data[2, colI] = V.data[1,colI] - lambda.up
# we get the first two option values
# And then go back  the rest of them
for(j in 3:(lastRow-1)) {
V.data[j, colI] =  (p.prime[j] -pu*V.data[j-1, colI])/pm.prime[j]
}
V.data[lastRow, colI] = V.data[lastRow-1, colI] - lambda.low
# Out put the V.data(option table)
list(V.data=V.data)
}
for(j in (nCols-1):1){
V.data[, j] = solve.crank.nicolson.tridiagnoal(V.data,pu,pm,pd,lambda.up,lambda.low,colI=j)$V.data[,j]
if(type1=='American'){
for(i in 1:nRows){
V.data[i, j] = payoff(S=S.data[i,lastCol],K=K,type1 = 'American',type2 = type2,
expect=V.data[i, j])
}
# consider American option can be exercised early
}
}
list(Type = paste(type1,type2), probability=c(pu,pm,pd),
Price = V.data[step+1,1],
S.first.steps=S.data[(step+1-first):(step+1+first),1:(1+first)],
V.first.steps=V.data[(step+1-first):(step+1+first),1:(1+first)]
)
# output result including Type, Option price, probability
# and first steps of Stock and Opton.
}
