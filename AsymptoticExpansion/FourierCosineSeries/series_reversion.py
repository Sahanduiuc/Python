import numpy as np
import math


def inverseSeries_old(coeffs):
    a = coeffs
    inverseCoeffs = []
    inverseCoeffs.append(0)
    inverseCoeffs.append(1 / a[1])
    inverseCoeffs.append(-a[1] ** (-3) * a[2])
    inverseCoeffs.append(a[1] ** (-5) * (2 * a[2] ** 2 - a[1] * a[3]))
    inverseCoeffs.append(a[1] ** (-7) * (5 * a[1] * a[2] * a[3] - a[1] ** 2 * a[4] - 5 * a[2] ** 3))
    inverseCoeffs.append(a[1] ** (-9) * (6 * a[1] ** 2 * a[2] * a[4] + 3 * a[1] ** 2 * a[3] ** 2
                                         + 14 * a[2] ** 4 - a[1] ** 3 * a[5] - 21 * a[1] * a[2] ** 2 * a[3]))
    inverseCoeffs.append(a[1] ** (-11) * (7 * a[1] ** 3 * a[2] * a[5] + 7 * a[1] ** 3 * a[3] * a[4]
                                          + 84 * a[1] * a[2] ** 3 * a[3] - a[1] ** 4 * a[6]
                                          - 28 * a[1] ** 2 * a[2] * a[3] ** 2 - 42 * a[2] ** 5
                                          - 28 * a[1] ** 2 * a[2] ** 2 * a[4]))
    inverseCoeffs.append(a[1] ** (-13) * (8 * a[1] ** 4 * a[2] * a[6] + 8 * a[1] ** 4 * a[3] * a[5]
                                          + 4 * a[1] ** 4 * a[4] ** 2 + 120 * a[1] ** 2 * a[2] ** 3 * a[4]
                                          + 180 * (a[1] * a[2] * a[3]) ** 2 + 132 * a[2] ** 6
                                          - a[1] ** 5 * a[7] - 36 * a[1] ** 3 * a[2] ** 2 * a[5]
                                          - 72 * a[1] ** 3 * a[2] * a[3] * a[4] - 12 * a[1] ** 3 * a[3] ** 3
                                          - 330 * a[1] * a[2] ** 4 * a[3]))
    return inverseCoeffs


def inverseSeries(coeffs):
    a = coeffs
    inverseCoeffs = np.array([0, 1 / a[1], -(a[2] / a[1] ** 3), (2 * a[2] ** 2 - a[1] * a[3]) / a[1] ** 5,
                              (-5 * a[2] ** 3 + 5 * a[1] * a[2] * a[3] - a[1] ** 2 * a[4]) / a[1] ** 7,
                              (14 * a[2] ** 4 - 21 * a[1] * a[2] ** 2 * a[3] + 3 * a[1] ** 2 * a[3] ** 2 + 6 * a[
                                  1] ** 2 * a[2] * a[4] - a[1] ** 3 * a[5]) / a[1] ** 9,
                              (-42 * a[2] ** 5 + 84 * a[1] * a[2] ** 3 * a[3] - 28 * a[1] ** 2 * a[2] * a[3] ** 2 - 28 *
                               a[1] ** 2 * a[2] ** 2 * a[4] + 7 * a[1] ** 3 * a[3] * a[4] + 7 * a[1] ** 3 * a[2] * a[
                                   5] - a[1] ** 4 * a[6]) / a[1] ** 11,
                              (132 * a[2] ** 6 - 330 * a[1] * a[2] ** 4 * a[3] + 180 * a[1] ** 2 * a[2] ** 2 * a[
                                  3] ** 2 - 12 * a[1] ** 3 * a[3] ** 3 + 120 * a[1] ** 2 * a[2] ** 3 * a[4] - 72 * a[
                                   1] ** 3 * a[2] * a[3] * a[4] + 4 * a[1] ** 4 * a[4] ** 2 - 36 * a[1] ** 3 * a[
                                   2] ** 2 * a[5] +
                               8 * a[1] ** 4 * a[3] * a[5] + 8 * a[1] ** 4 * a[2] * a[6] - a[1] ** 5 * a[7]) / a[
                                  1] ** 13, (
                              -429 * a[2] ** 7 + 1287 * a[1] * a[2] ** 5 * a[3] - 990 * a[1] ** 2 * a[2] ** 3 * a[
                                  3] ** 2 + 165 * a[1] ** 3 * a[2] * a[3] ** 3 - 495 * a[1] ** 2 * a[2] ** 4 * a[4] +
                              495 * a[1] ** 3 * a[2] ** 2 * a[3] * a[4] - 45 * a[1] ** 4 * a[3] ** 2 * a[4] - 45 * a[
                                  1] ** 4 * a[2] * a[4] ** 2 + 165 * a[1] ** 3 * a[2] ** 3 * a[5] - 90 * a[1] ** 4 * a[
                                  2] * a[3] * a[5] + 9 * a[1] ** 5 * a[4] * a[5] - 45 * a[1] ** 4 * a[2] ** 2 * a[6] +
                              9 * a[1] ** 5 * a[3] * a[6] + 9 * a[1] ** 5 * a[2] * a[7] - a[1] ** 6 * a[8]) / a[
                                  1] ** 15, (
                              1430 * a[2] ** 8 - 5005 * a[1] * a[2] ** 6 * a[3] + 5005 * a[1] ** 2 * a[2] ** 4 * a[
                                  3] ** 2 - 1430 * a[1] ** 3 * a[2] ** 2 * a[3] ** 3 + 55 * a[1] ** 4 * a[3] ** 4 +
                              2002 * a[1] ** 2 * a[2] ** 5 * a[4] - 2860 * a[1] ** 3 * a[2] ** 3 * a[3] * a[4] + 660 *
                              a[1] ** 4 * a[2] * a[3] ** 2 * a[4] + 330 * a[1] ** 4 * a[2] ** 2 * a[4] ** 2 - 55 * a[
                                  1] ** 5 * a[3] * a[4] ** 2 - 715 * a[1] ** 3 * a[2] ** 4 * a[5] +
                              660 * a[1] ** 4 * a[2] ** 2 * a[3] * a[5] - 55 * a[1] ** 5 * a[3] ** 2 * a[5] - 110 * a[
                                  1] ** 5 * a[2] * a[4] * a[5] + 5 * a[1] ** 6 * a[5] ** 2 + 220 * a[1] ** 4 * a[
                                  2] ** 3 * a[6] - 110 * a[1] ** 5 * a[2] * a[3] * a[6] + 10 * a[1] ** 6 * a[4] * a[6] -
                              55 * a[1] ** 5 * a[2] ** 2 * a[7] + 10 * a[1] ** 6 * a[3] * a[7] + 10 * a[1] ** 6 * a[2] *
                              a[8] - a[1] ** 7 * a[9]) / a[1] ** 17,
                              (-4862 * a[2] ** 9 + 19448 * a[1] * a[2] ** 7 * a[3] - 24024 * a[1] ** 2 * a[2] ** 5 * a[
                                  3] ** 2 + 10010 * a[1] ** 3 * a[2] ** 3 * a[3] ** 3 - 1001 * a[1] ** 4 * a[2] * a[
                                   3] ** 4 - 8008 * a[1] ** 2 * a[2] ** 6 * a[4] +
                               15015 * a[1] ** 3 * a[2] ** 4 * a[3] * a[4] - 6006 * a[1] ** 4 * a[2] ** 2 * a[3] ** 2 *
                               a[4] + 286 * a[1] ** 5 * a[3] ** 3 * a[4] - 2002 * a[1] ** 4 * a[2] ** 3 * a[
                                   4] ** 2 + 858 * a[1] ** 5 * a[2] * a[3] * a[4] ** 2 - 22 * a[1] ** 6 * a[4] ** 3 +
                               3003 * a[1] ** 3 * a[2] ** 5 * a[5] - 4004 * a[1] ** 4 * a[2] ** 3 * a[3] * a[5] + 858 *
                               a[1] ** 5 * a[2] * a[3] ** 2 * a[5] + 858 * a[1] ** 5 * a[2] ** 2 * a[4] * a[5] - 132 *
                               a[1] ** 6 * a[3] * a[4] * a[5] - 66 * a[1] ** 6 * a[2] * a[5] ** 2 -
                               1001 * a[1] ** 4 * a[2] ** 4 * a[6] + 858 * a[1] ** 5 * a[2] ** 2 * a[3] * a[6] - 66 * a[
                                   1] ** 6 * a[3] ** 2 * a[6] - 132 * a[1] ** 6 * a[2] * a[4] * a[6] + 11 * a[1] ** 7 *
                               a[5] * a[6] + 286 * a[1] ** 5 * a[2] ** 3 * a[7] -
                               132 * a[1] ** 6 * a[2] * a[3] * a[7] + 11 * a[1] ** 7 * a[4] * a[7] - 66 * a[1] ** 6 * a[
                                   2] ** 2 * a[8] + 11 * a[1] ** 7 * a[3] * a[8] + 11 * a[1] ** 7 * a[2] * a[9] - a[
                                   1] ** 8 * a[10]) / a[1] ** 19])
    return inverseCoeffs

def testifyExponentSeries(x):
    coeffs = [1 / math.factorial(l) for l in range(12)]
    inverseCoeffs = inverseSeries(coeffs)
    y = math.exp(x) - 1
    y_array = [y ** l for l in range(11)]
    x2 = np.dot(inverseCoeffs, y_array)
    return x2 - x
